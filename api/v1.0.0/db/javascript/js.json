{
    "category": "JavaScript",
    "category_initial": "js",
    "questions": [
        {
            "id": "js1",
            "source": "code CBT",
            "question": "What does XHR stand for",
            "answer": "XML Http Request",
            "options": [
                "Xtensive Http Response",
                "Xtensive Http Request",
                "XML Http Request",
                "XML Http  Response"
            ]
        },
        {
            "id": "js2",
            "source": "code CBT",
            "question": "Event delegation is ________",
            "answer": "Falling down to children elements from their parents in the DOM tree",
            "options": [
                "Falling down to children elements from their parents in the DOM tree",
                "Moving from children up to their parent in the DOM",
                "adding an event listener to a selected element",
                "Waiting for a DOM event to be triggered"
            ]
        },
        {
            "id": "js3",
            "source": "code CBT",
            "question": "The constructor new Number() is a type of",
            "answer": "Object",
            "options": [
                "Object",
                "Number",
                "String",
                "Constructor numeric"
            ]
        },
        {
            "id": "js4",
            "source": "code CBT",
            "question": "All of the following are ways to handle asyncronous calls in JavaScript except using",
            "answer": "Reusables",
            "options": [
                "Callback functions",
                "Async await",
                "Promises",
                "Reusables"
            ]
        },
        {
            "id": "js5",
            "source": "code CBT",
            "question": "Which is a characteristic of var when defining a variable",
            "answer": "var is visible to all nested scopes in its definined scope",
            "options": [
                "var is visible in its defined scope only",
                "var can not be instantiated",
                "var is visible to all nested scopes in its definined scope",
                "var works only when defined in block level scopes"
            ]
        },
        {
            "id": "js6",
            "source": "code CBT",
            "question": "What does the acronym REST stand for",
            "answer": "Representational State Transfer",
            "options": [
                "Representational State Transfer",
                "Represented State Transfer",
                "Represent State Transfer",
                "Representable State Transfer"
            ]
        },
        {
            "id": "js7",
            "source": "code CBT",
            "question": "What does the function newDay return when called if it comes from the code below. let day = 'Tuesday'; function newDay() { day = Wednesday; return day; }",
            "answer": "A ReferenceError",
            "options": [
                "'Wednesday'",
                "A SyntaxError",
                "A ReferenceError",
                "'Tuesday'"
            ]
        },
        {
            "id": "js8",
            "source": "code CBT",
            "question": "A function calling its self like in the example below will return a ______ error notifying you that ______. function recursive() { return recursive() }",
            "answer": "RangeError, Maximum call stack size exceeded",
            "options": [
                "RecursiveError, Recursion to self",
                "LoopError, Maximum loop stack exceded",
                "RecursiveError, Maximum call stack size exceeded",
                "RangeError, Maximum call stack size exceeded"
            ]
        },
        {
            "id": "js9",
            "source": "code CBT",
            "question": "One of the advantages of try and catch is that ______",
            "answer": "The code that comes after if will still run regardless of the result",
            "options": [
                "The code that comes after if will only run if there is no error",
                "The code that comes after if will still run regardless of the result",
                "Your code will never crash even if there are other errors outside the try-catch block",
                "Your call stack can not be exceeded"
            ]
        },
        {
            "id": "js10",
            "source": "code CBT",
            "question": "A function with an asterisk after its function keyword (function* aFunction(){ ... }) is known as a ______",
            "answer": "generator function",
            "options": [
                "Miscellaneous function",
                "Constructor function",
                "Generator function",
                "Asynchronous function"
            ]
        },
        {
            "id": "js11",
            "source": "code CBT",
            "question": "What is the major differience between array.indexOf(...) and array.includes(...)",
            "answer": "'indexOf' returns -1 and 'includes' returns false if no index is found",
            "options": [
                "'indexOf' returns true or false depending on the results found in the array",
                "'indexOf' returns -1 and 'includes' returns false if no index is found",
                "There is absolutely no differience",
                "There is no such thing as array.includes (it is not an array method)"
            ]
        },
        {
            "id": "js12",
            "source": "code CBT",
            "question": "A primitive data type is?",
            "answer": "A data type which can not hold more than one piece of data",
            "options": [
                "A data type which can hold infinite amount of data",
                "A data type which can not hold more than one piece of data",
                "A data type which returns an Object",
                "None of the above"
            ]
        },
        {
            "id": "js13",
            "source": "code CBT",
            "question": "The reference data type can be defined as?",
            "answer": "One whose data can be stored to be referenced later",
            "options": [
                "One which returns an Object literal",
                "One whose data can be stored to be referenced later",
                "One which can not hold more than one piece of data",
                "One which can hold infinite amount of data"
            ]
        },
        {
            "id": "js14",
            "source": "code CBT",
            "question": "Which of the following is not a primitive data type",
            "answer": "Symbols",
            "options": [
                "Strings",
                "Symbols",
                "Numbers",
                "Null"
            ]
        },
        {
            "id": "js15",
            "source": "code CBT",
            "question": "What is the effect of the three dots(...) as a parameter in a function",
            "answer": "It makes it possible for the function to take a large number of arguments that we dont have to define",
            "options": [
                "It makes it possible for the function to take a large number of arguments that we dont have to define",
                "The function will return a SyntaxError",
                "The function becomes a generator function",
                "It makes the function to take only numbers as arguements"
            ]
        },
        {
            "id": "js16",
            "source": "code CBT",
            "question": "What can the three dots(...) in this function be called. function dots(me, you, ...) { console.log('Dots are cool') }",
            "answer": "The rest parameter",
            "options": [
                "The rest parameter",
                "Infinity parameter",
                "Loop parameter",
                "Dotting parameter syntax"
            ]
        }

    ]
}